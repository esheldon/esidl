PRO make_8bitcolors

    n_colors=!d.n_colors < 256

    rct = lonarr(n_colors)
    gct = rct
    bct = rct

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; The rgb values for some colors
    ;; These will be put at the end of the color table, after the greys
    ;; white should be highest number (last in list)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    names=['black','magenta','red','green','blue','yellow','cyan','white']
    redtmp =   [0,       255,      255,  0,      0,     255,     0,     255]
    greentmp = [0,       0,        0,    255,    0,     255,     255,   255]
    bluetmp =  [0,       255,      0,    0,      255,   0,       255,   255]

    ;; these generated by make_8bitcolors.pro
    addnames = $
        ['lightsteelblue','skyblue','darkslategrey',$
        'slategrey',$
        'lightblue','midnightblue','navyblue', $
        'royalblue','dodgerblue','darkblue', $
        'turquoise','darkgreen','seagreen', $
        'forestgreen','lightgreen','sienna', $
        'firebrick','salmon','orange', $
        'orangered','hotpink','deeppink', $
        'violet','darkred','purple']

    addred   = $
        [176, 135, 47, 112,  $
        173, 25, 0,  $
        65, 30, 0,  $
        64, 0, 46,  $
        34, 144, 160,  $
        178, 250, 255,  $
        255, 255, 255,  $
        238, 139, 160]

    addgreen = $
        [196, 206, 79, 128,  $
        216, 25, 0,  $
        105, 144, 0,  $
        224, 100, 139,  $
        139, 238, 82,  $
        34, 128, 165,  $
        69, 105, 20,  $
        130, 0, 32]

    addblue  = $
        [222, 235, 79, 144,  $
        230, 112, 128,  $
        225, 255, 139,  $
        208, 0, 87,  $
        34, 144, 45,  $
        34, 114, 0,  $
        0, 180, 147,  $
        238, 0, 240]

    names = [addnames, names]
    redtmp = [addred, redtmp]
    greentmp = [addgreen, greentmp]
    bluetmp = [addblue, bluetmp]

    nc = n_elements(redtmp)

    ;; how many positions are left for other colors (such as the greys)?
    left = n_colors-nc

    ;; the indices in the color table for these colors
    ;; indices correspond directly with values and names above
    colornums = left + lindgen(nc)

    ;; Fill in the end of the color table
    rct[left:n_colors-1] = long(redtmp)
    gct[left:n_colors-1] = long(greentmp)
    bct[left:n_colors-1] = long(bluetmp)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; The color values for greys, from black (0) to 255
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    greys = long( arrscl( findgen(left), 0, 255 ) )

    rct[0:left-1] = greys
    gct[0:left-1] = greys
    bct[0:left-1] = greys

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Define the grey color indices
    ;; will use remaining space. If left less than 100+1 then will
    ;; have some greys same.  If left > 100+1 then some color indices
    ;; won't be used
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ngrey = 100+1
    greynums = ntostr( long( arrscl( findgen(ngrey), 0, left-1 ) ) )+'L'
    for i=0l, ngrey-1 do begin 
        color = greynums[i]
        name = "'!grey"+ntostr(i)+"'"
        command='defsysv, '+name+', '+color
        if not execute(command) then message,'Error'
    endfor 

    ;;;;;;;;;;;;;;;;;;;;;;;;
    ;; load the color table
    ;;;;;;;;;;;;;;;;;;;;;;;;

    if dexist or (!d.name EQ 'PS') then tvlct, rct, gct, bct

    ;; create the structure holding the colors
    cstruct8 = {names:names, lnames:strlowcase(names), indices:colornums}
    return, cstruct

end




  ;; read in a file and define the colors
  infile = '/sdss5/data0/esheldon/idl.lib/PLOTTING/rgb_8.txt'
  outfile = '/sdss5/data0/esheldon/idl.lib/PLOTTING/rgb8bit.input'

  readcol, infile, red, grn, blue, names, format='I,I,I,A'

  nn=n_elements(red)

  openw, lun, outfile, /get_lun
  printf, lun

  addstr1='          '          ;main indentation

  ;; the names
  addstr = ''
  printf, lun, addstr1+"addnames = '!' + [", format='(a,$)'
  FOR i=0L, nn-1 DO BEGIN
      out = addstr+"'"+names[i]+"'"
      IF i NE nn-1 THEN out=out+","
      IF (i MOD 3 EQ 0) AND (i NE nn-1) AND (i NE 0) THEN BEGIN 
          printf, lun, out + ' $'
          addstr = addstr1+'                  '
      ENDIF ELSE BEGIN 
          printf, lun, out, format='(a,$)'
          addstr=''
      ENDELSE 

  ENDFOR 
  printf, lun, "]"

  ;; reds
  addstr=''
  printf, lun
  printf, lun, addstr1+"addred   = [", format='(a,$)'
  FOR i=0L, nn-1 DO BEGIN
      out = addstr+ntostr(red[i])
      IF i NE nn-1 THEN out=out+", "
      IF (i MOD 3 EQ 0) AND (i NE nn-1) AND (i NE 0) THEN BEGIN 
          printf, lun, out + ' $'
          addstr = addstr1+'            '
      ENDIF ELSE BEGIN 
          printf, lun, out, format='(a,$)'
          addstr=''
      ENDELSE 
  ENDFOR 
  printf, lun, "]"

  ;; greens
  addstr=''
  printf, lun
  printf, lun, addstr1+"addgreen = [", format='(a,$)'
  FOR i=0L, nn-1 DO BEGIN
      out = addstr+ntostr(grn[i])
      IF i NE nn-1 THEN out=out+", "
      IF (i MOD 3 EQ 0) AND (i NE nn-1) AND (i NE 0) THEN BEGIN 
          printf, lun, out + ' $'
          addstr = addstr1+'            '
      ENDIF ELSE BEGIN 
          printf, lun, out, format='(a,$)'
          addstr=''
      ENDELSE 
  ENDFOR 
  printf, lun, "]"

  ;; greens
  addstr=''
  printf, lun
  printf, lun, addstr1+"addblue  = [", format='(a,$)'
  FOR i=0L, nn-1 DO BEGIN
      out = addstr+ntostr(blue[i])
      IF i NE nn-1 THEN out=out+", "
      IF (i MOD 3 EQ 0) AND (i NE nn-1) AND (i NE 0) THEN BEGIN 
          printf, lun, out + ' $'
          addstr = addstr1+'            '
      ENDIF ELSE BEGIN 
          printf, lun, out, format='(a,$)'
          addstr=''
      ENDELSE 
  ENDFOR 
  printf, lun, "]"

  free_lun, lun

END 
